
ПРИЕЧАНИЕ: В этом ReamMe файле НЕ поясняется логика работы скриптов для OSINT, только скрипты которые создавались в качестве иллюстрирующего решения для процессов Хаба диверсионных инициатив (https://miro.com/app/board/uXjVPnUfkh8=/): криптографические скрипты и скрипты простейшего резервного копирования с использованием git.

-------------------------------

В папке содержатся несколько полезных скриптов для работы с инфраструктурой.

Чтобы инфраструктура работала нужно установить git client:
1. Зайти на страницу загрузки: [https://git-scm.com/download/win]
2. Нажать на ссылку [64-bit Git for Windows Setup] чтобы скачать инсталлятор.
3. Выполнить установку - выбирая все пункты по-умолчанию.


				  
				  ____________________________
_________________| Криптографические действия |_________________
                 |____________________________|

encryption  . . . . . . . . . Папка содержащая инфраструктуру для криптографических действий
├- generate_keys.bat  . . . . [1] Скрипт для генерации пары ключей: открытого и закрытого
└- operations . . . . . . . . Папка для среды выполнения криптографических операций
    ├- enctypt.bat  . . . . . [2] Скрипт выполняющий шифрование файлов в папке "in"
	├- decrypt.bat  . . . . . [3] Скрипт выполняющий дешифрование файлов в папке "in"
    ├- create_hashes.bat  . . [4] Скрипт выполняющий вычисление хэшей файлов в папке "in"
    ├- in . . . . . . . . . . Папка для входных файлов которые обрабатываются скриптами
	└- out  . . . . . . . . . Папка в которую будут записываться файлы результаты скриптов


--- [1] generate_keys.bat ---

При запуске скрипт создаёт в папке со скриптом подпапку "keys" и записывает в неё пару из публичного и приватного ключей. Эти ключи можно использовать для шифрования (можно скриптом "enctypt.bat") и расшифровки (можно скриптом "decrypt.bat") файлов.

При исполнении скрипта нужно будет трижды указать пароль ("pass phrase") к приватному ключу:

1. Установка пароля (1) и подтверждение пароля (2) для приватного ключа, после следующих сообщений в консоли:
"Enter pass phrase for keys\private.pem:"
"Verifying - Enter pass phrase for keys\private.pem:"
Примечание: Символы пароля не будут отображаться при вводе!

2. Передача пароля (3) для генерирования публичного ключа по приватному ключу:
"Enter pass phrase for keys\private.pem:""
Примечание: Символы пароля не будут отображаться при вводе!

Про то что такое публичный и приватный ключи можно почитать в этой доке:
[https://docs.google.com/document/d/182jluBve1Xrhjp6GKCUwUBrm_83NEq-QmSBz2gbKTpk/edit]


--- [2] enctypt.bat ---

При запуске скрипт выполняет шифрование всех файлов в папке "in" используя публичный ключ который должен находиться в папке "in/keys". Зашифрованные файлы сохраняются в папку "out"


--- [3] decrypt.bat ---

При запуске скрипт выполняет расшифровку всех файлов в папке "in" используя приватный ключ который должен находиться в папке "in/keys". Зашифрованные файлы сохраняются в папку "out".

При исполнении скрипта нужно будет указать пароль ("pass phrase") к приватному ключу - чтобы было возможно выполнить расшифровку:
"Enter pass phrase for ..\in\keys\private.pem:"
Примечание: Символы пароля не будут отображаться при вводе!


--- [4] create_hashes.bat ---

При запуске скрипт создаст md5-хэш для каждого из файлов в папке "in" и сохранит их в папке "out".
Примечание: Обратите внимание, в созданных файлах будет записан хэш - и имя файла из которого хэш был создан.


                    ______________________
___________________| Действия с базой git |____________________
                   |______________________|

Система контроля версий git может использоваться для распределённого хранения файлов. С помощью этого инструмента все люди имеющие URL-адрес удалённого хранилища git могут без особых сложностей держать у себя синхронизированные с этим хранилищем локальные копии данных - и легко восстановить хранилище в случае если оно будет злонамеренной уничтожено.

Скрипты связанные с git упрощают работу с типичными действиями git. Прежде чем пользоваться скриптами из этой папки вам нужно будет настроить URL-адрес репозитория с которыми будут работать скрипты:
1. Зайдите в папку "_" в корне инфраструктуры и откройте на редактирование файл "vars.bat".
2. Измените следующую строку:
"set repository_path=!!!Enter restore URL here!!!"
Вместо "!!!Enter restore URL here!!!" укажите URL-адрес вашего репозитория. Например, вот так может выглядить настройка работы с репозиторием в котором хранятся популярные gitignore-файлы:
"set repository_path=https://github.com/github/gitignore.git"
3. Сохраните файл "vars.bat". Теперь вы можете использовать скрипты из папки "git" для работы с выбранным репозиторием.

git . . . . . . . . . . . . . Папка содержащая скрипты для работы с git
├- load.bat . . . . . . . . . [5] Обновить локальную копию git-репозитория
├- review.bat . . . . . . . . [6] Подготовить файлы для ревью изменений в репозитории git
├- save.bat . . . . . . . . . [7] Сохранить на сервер изменения в локальной копии git-репозитория (*)
└- restore  . . . . . . . . . Папка для скриптов помогающих в восстановлении репозитория (*)
    └- restore.bat  . . . . . [8] Скрипт для восстановлении репозитория из локальных копий прошлого репозитория (*)

(*) - скрипты для администраторов удалённого хранилища.


--- [5] load.bat ---

Скрипт которые создаёт локальную копию репозитория, скачивая её из удалённого хранилища.
После первого вызова создаст в папке рядом со скриптом подпапку "base" с локальной копией репозитория.
При последующих запусках загрузит в копию в папке "base" последнюю версию репозитория из удалённого хранилища.


--- [6] review.bat ---

Скрипт который подготовит review-файлы. Главный файл - "commits.txt" - будет содержать в читаемом виде последние изменения текстовых файлов на удалённом хранилище.
Структуру файла для ревью коммитов можно глянуть тут [https://miro.com/app/board/uXjVPnUfkh8=/?moveToWidget=3458764550797347485&cot=14]

Этот скрипт создан для проверки изменений репозиториев в условиях zero trust. С помощью ревью проверяется корректность изменений которые вносят администраторы удалённого хранилища. Что такое "корректные изменения" определяется спецификой zero trust хранилища.

--- [7] save.bat ---

Скрипт который загружает все изменения содержащиеся в файлах папки "base" в master-ветку удалённого хранилища. Это действие доступно только если у вызывающего скрипт есть права на загрузку изменений.

--- [8] restore.bat ---

Скрипт который упрощает восстановления репозитория в случае уничтожения удалённого хранилища git. Чтобы использование этого скрипта было полезным, администрация которая будет восстанавливать репозитория должна понимать принципы работы с git.

Принцип работы следующий:
1. В сообществе людей у которых могут храниться локальные копии уничтоженного репозитория делается запрос: скидываем папки base администрации для восстановления репозитория.
2. Администрация называет папки получаемые от сообщества так чтобы можно было их различать - и переносит эти папки с локальными копиями в папку содержащую скрипт "restore.bat".
3. Администрация готовит новое удалённое хранилище для репозитория.
4. Администрация указывает URL адрес нового хранилища в скрипте, изменяя следующую строчку:
"set restore_repository_path=!!!Enter restore URL here!!!"
так чтобы вместо "!!!Enter restore URL here!!!" был указан URL-адрес нового удалённого хранилища.
4. Администрация запускает скрипт. Из каждой папки-копии расположеной в папке со скриптом будет создана отдельная ветка для нового хранилища; эти ветки будут названы по имени папки содержащей соответствующую копию. После создания ветки будут добавлены в удалённое хранилище. В конце работы скрипт скачает удалённое хранилище в папку "__restore_repo__" рядом со скриптом.
5. После описанных действий администрации будет намного проще выбрать лучшую версию репозитория - так как все имеющиеся варианты старого репозитория будут храниться в виде веток одного нового репозитория.




                      ____________________
_____________________|         _          |____________________
                     |____________________|

Папка со вспомогательными скриптами. Они используются в рамках других скриптов и не требуют развёрнутого пояснения по принципам работы.

_ . . . . . . . . . . . . . . Папка со вспомогательными скриптами                         
├- vars.bat . . . . . . . . . [8] Скрипт в котором настраиваются переменные для других скриптов инфраструктуры.
└- setup_git_local.bat  . . . [9] Скрипт для настройки корректного отображения русского языка для git-скриптов
